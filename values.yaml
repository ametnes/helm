agent:

  replicas: 1
  name: ametnes-cloud-agent
  labels:
    app.kubernetes.io/module: agent
    app.kubernetes.io/instance: ametnes-cloud

  selectorLabels:
    app.kubernetes.io/module: agent
    app.kubernetes.io/instance: ametnes-cloud

  image:
    repository: registry.gitlab.com/ametnes/cloud/api.resources.ametnes.com
    pullPolicy: IfNotPresent
    tag: "0.1.8cbedf97"

  imagePullSecrets:
    - name: gitlab-prod-pull-secrets
  extraEnvs: {}
  extraVolumes: {}
  extraVolumeMounts: {}
  clientCertsSecret: client-tls
  rbac:
    enabled: true

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ametnes-cloud-agent

  config:
    location: f691f66e5e
    cloud_endpoint: https://api-test.cloud.ametnes.com
    resource_endpoint: https://api.test.resources.cloud.ametnes.com
    verify_ssl: true
    debug: true
    environment: prod

#    load_balancer:
#      config: helios-system/nginx-lb1-ingress-nginx-tcp
#      service: helios-system/nginx-lb1-ingress-nginx-nginx-lb1
#      ingress:
#        class: k8s.io/ingress-nginx

    backup:
      work_dir: '/tmp'
      bucket: 'ametnes-backup-euw2-prod'
      provider: aws
      enabled: true

    kubernetes:
      in_cluster: true

    memcache:
      hosts:
        - system-cache.ametnes-system:11211
      session:
        expiry: 86400
      mysql:
        resources:
          data_expiry: 1
          lock_expiry: 1

    resources:
      service/mysql:5.7:
        id: svc.mysql57
        enabled: false
        name: "MySql 5.7 Service"
        type: 'service/mysql'
        timeout: 900
        create_timeout: 5
        create_key_expiry: 86400
        connection:
          location: 'aws/eu-west-2'
        values:
          image:
            tag: 5.7-debian-10
            debug: true
          master:
            livenessProbe: &mysqlLP
              failureThreshold: 30
              initialDelaySecond: 500
            extraEnvVars: &mysqlEnv
              - name: MYSQL_INIT_SLEEP_TIME
                value: "120"
            tolerations: []
            affinity: {}
            persistence: &mysqlPers
              enabled: true
            resources: &mysqlMstRsc
              limits:
                cpu: 1
                memory: 1Gi
              requests:
                cpu: 250m
                memory: 256Mi
          metrics:
            enabled: true
          slave:
            livenessProbe: *mysqlLP
            persistence: *mysqlPers
            tolerations: []
            extraEnvVars: *mysqlEnv
            replicas: 1
            resources:
              # This should be checked to be the minimum for this resource
              requests:
                cpu: 1
                memory: 2Gi
          volumePermissions:
            enabled: true

      service/mysql:8.0:
        id: svc.mysql80
        enabled: true
        name: "MySql 8.0 Service"
        type: 'service/mysql'
        timeout: 3600
        create_timeout: 5
        create_key_expiry: 86400
        connection:
          location: 'aws/eu-west-2'
          host: 'mysql80-d9c5.euw2.cloud.ametnes.com'
        values:
          image:
            tag: 8.0.20-debian-10-r41
            debug: true
          master:
            extraEnvVars: *mysqlEnv
            livenessProbe: *mysqlLP
            tolerations: []
            affinity: {}
            persistence: *mysqlPers
            resources: *mysqlMstRsc
          metrics:
            enabled: true
          slave:
            extraEnvVars: *mysqlEnv
            livenessProbe: *mysqlLP
            persistence: *mysqlPers
            tolerations: []
            affinity: {}
            replicas: 1
            resources:
              # This should be checked to be the minimum for this resource
              requests:
                cpu: 1
                memory: 2Gi
          volumePermissions:
            enabled: true


      service/postgres:11.9:
        id: svc.postgres119
        enabled: true
        type: 'service/postgres'
        name: "Postgres 11.9 Service"
        connection:
          location: 'aws/eu-west-2'
          host: 'postgres119-e1f5.euw2.cloud.ametnes.com'
          database: initdb
        timeout: 3600
        create_timeout: 5
        create_key_expiry: 86400
        values:
          image:
            # https://github.com/bitnami/bitnami-docker-postgresql#supported-tags-and-respective-dockerfile-links
            tag: 11.9.0-debian-10-r48
            debug: false
          tls:
            enabled: true
            certFilename: server.crt
            certKeyFilename: server.key
          persistence: *mysqlPers
          master:
    #        extraEnvVars: *mysqlEnv
            livenessProbe: *mysqlLP
            resources: *mysqlMstRsc
            tolerations: []
            affinity: {}
          postgresqlDatabase: initdb
          metrics:
            enabled: true
          slave:
    #        extraEnvVars: *mysqlEnv
            livenessProbe: *mysqlLP
            tolerations: []
            affinity: {}
            resources: *mysqlMstRsc
          volumePermissions:
            enabled: true


      service/postgres:12.4:
        id: svc.postgres124
        enabled: true
        type: 'service/postgres'
        name: "Postgres 12.4 Service"
        connection:
            location: 'aws/eu-west-2'
            host: 'postgres124-a0b9.euw2.cloud.ametnes.com'
            database: initdb
        timeout: 3600
        create_timeout: 5
        create_key_expiry: 86400
        values:
          image:
            # https://github.com/bitnami/bitnami-docker-postgresql#supported-tags-and-respective-dockerfile-links
            tag: 12.4.0-debian-10-r57
            debug: false
          tls:
            enabled: true
            certFilename: server.crt
            certKeyFilename: server.key
          persistence: *mysqlPers
          master:
    #        extraEnvVars: *mysqlEnv
            livenessProbe: *mysqlLP
            resources: *mysqlMstRsc
            tolerations: []
            affinity: {}
          postgresqlDatabase: initdb
          metrics:
            enabled: true
          slave:
    #        extraEnvVars: *mysqlEnv
            livenessProbe: *mysqlLP
            tolerations: []
            affinity: {}
            resources: *mysqlMstRsc
          volumePermissions:
            enabled: true

      service/postgres:13.0:
        id: svc.postgres130
        enabled: true
        type: 'service/postgres'
        name: "Postgres 13.0 Service"
        connection:
            location: 'aws/eu-west-2'
            host: 'postgres130-f1b9.euw2.cloud.ametnes.com'
            database: initdb
        timeout: 3600
        create_timeout: 5
        create_key_expiry: 86400
        values:
          image:
            # https://github.com/bitnami/bitnami-docker-postgresql#supported-tags-and-respective-dockerfile-links
            tag: 13.0.0-debian-10-r7
            debug: false
          tls:
            enabled: true
            certFilename: server.crt
            certKeyFilename: server.key
          persistence: *mysqlPers
          master:
    #        extraEnvVars: *mysqlEnv
            livenessProbe: *mysqlLP
            resources: *mysqlMstRsc
            tolerations: []
            affinity: {}
          postgresqlDatabase: initdb
          metrics:
            enabled: true
          slave:
    #        extraEnvVars: *mysqlEnv
            livenessProbe: *mysqlLP
            tolerations: []
            affinity: {}
            resources: *mysqlMstRsc
          volumePermissions:
            enabled: true

      service/redis:6.2:
        id: svc.redis62
        enabled: true
        type: 'service/redis'
        name: "Redis 6.2 Service"
        connection:
            location: 'aws/eu-west-2'
            host: 'redis60-f1b9.euw2.cloud.ametnes.com'
        timeout: 600
        create_timeout: 5
        create_key_expiry: 86400
        values:
          image:
            # https://github.com/bitnami/bitnami-docker-redis#supported-tags-and-respective-dockerfile-links
            tag: 6.2.1-debian-10-r36
            debug: false
          tls:
            enabled: true
            certFilename: server.crt
            certKeyFilename: server.key
            certCAFilename: ca.crt
            authClients: true
          usePassword: true
          existingSecretPasswordKey: "redis-password"
          master:
            resources: *mysqlMstRsc
            tolerations: []
            affinity: {}
            persistence: *mysqlPers
          metrics:
            enabled: true
          slave:
    #        livenessProbe: *mysqlLP
            tolerations: []
            affinity: {}
            resources: *mysqlMstRsc
            persistence: *mysqlPers
          volumePermissions:
            enabled: true


      service/neo4j:4.2:
        id: svc.neo4j42
        enabled: true
        type: service/neo4j
        connection:
          host: unknown
          location: aws/eu-west-2
        connections: 2
        create_timeout: 1
    #    wait_for_resources: false
        name: Neo4J 4.2 Service
        timeout: 300
        values:
          acceptLicenseAgreement: 'yes'
          securityContext:
            runAsNonRoot: true
            runAsUser: 7474
          core:
            persistentVolume:
              enabled: true
            resources:
              requests:
                cpu: 1
                memory: 1Gi
          defaultDatabase: initdb
          imageTag: 4.2.7
          readReplica:
            persistentVolume:
              enabled: true
            resources:
              requests:
                cpu: 1
                memory: 1Gi
          affinity: {}
          tolerations: []

      service/kafka:2.8:
        connection:
          host: unknown
          port: '16796'
        connections: 4
        create_timeout: 1
        id: svc.kafka28
        name: Kafka 2.8 Service
        timeout: 300
        type: service/kafka
    #    wait_for_resources: false
        values:
          allowPlaintextListener: true
          affinity: {}
          containerSecurityContext:
            enabled: true
            fsGroup: 2000
            runAsUser: 0
          image:
            tag: 2.8.0-debian-10-r43
          persistence:
            enabled: true
          resources:
            requests:
              cpu: 1
              memory: 1Gi
          securityContext:
            enabled: true
            fsGroup: 2000
            runAsUser: 0
          tolerations: []
          zookeeper:
            affinity: {}
            persistence: {}
            tolerations: []


    account_attributes:
      version: v1
      limits:
        resources:
          storage: 1000



  podAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  resources:
    limits:
     cpu: 2
     memory: 2Gi
    requests:
     cpu: 100m
     memory: 128Mi

  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  affinity: {}

memcached:
  fullnameOverride: system-cache